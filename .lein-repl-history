quit
exit
main 8000
-main 8000
run 8000
(-main 8000)
exit
(-dev-main 8000)
exit
(-dev-main 8000)
exit
(-dev-main 8000)
exit
(-dev-main 8000)
exit
(-dev-main 8000)
exit
(-dev-main 8000)
exit
start!
start
(start)
exit
run 8000
(-main 8000)
(start-web-server! 8000)
exit
(start-web-server! 8000)
(transit/writ")
(prn (transit/read reader))
exit
(prn (transit/read reader))
(transit/write writer "foo")
(prn (transit/read reader))
(transit/write writer "foo")
(transit/write writer {:a [1 2]})
(prn (transit/read reader))  ;; => "foo"
(prn (transit/read reader))  ;; => {:a [1 2]}
(write-string "foo")
exit
(write-string "foo")
(defn login-handler
  "Here's where you'll add your server-side login/auth procedure (Friend, etc.).
  In our simplified example we'll just always successfully authenticate the user
  with whatever user-id they provided in the auth request."
  [ring-req]
  (let [{:keys [session params]} ring-req
        {:keys [user-id]} params]
    (debugf "Login request: %s" params)
    {:status 200 :session (assoc session :uid user-id)}))
(write-string "foo")
exit
(write-string "foo")
(defn login-handler
  "Here's where you'll add your server-side login/auth procedure (Friend, etc.).
  In our simplified example we'll just always successfully authenticate the user
  with whatever user-id they provided in the auth request."
  [ring-req]
  (let [{:keys [session params]} ring-req
        {:keys [user-id]} params]
    (debugf "Login request: %s" params)
exit
(write-string "foo")
exit
(start-web-server! 8000)
exit
(-main 8000)
(start-example-broadcaster!)
exit
;; Write data to a stream
(def out (ByteArrayOutputStream. 4096))
(def writer (transit/writer out :json))
(transit/write writer "foo")
(transit/write writer {:a [1 2]})
;; Take a peek at the JSON
(.toString out)
;; => "{\"~#'\":\"foo\"} [\"^ \",\"~:a\",[1,2]]"
;; Read data from a stream
(def in (ByteArrayInputStream. (.toByteArray out)))
(def reader (transit/reader in :json))
(prn (transit/read reader))  ;; => "foo"
(prn (transit/read reader))  ;; => {:a [1 2]}
(prn (transit/read reader))  ;; => "foo"
(transit/write writer "foo")
(prn (transit/read reader))  ;; => {:a [1 2]}
(.toString out)
(transit/write writer "foo")
exit
(start-example-broadcaster!)
EXIT
exit
(use 'serial-port)
(list-ports)
exit
(use 'serial.core)
(use 'serial.util)
(list-ports)
(open "/dev/tty.usbmodemfa141")
(list-ports)
(open "COM3")
exit
